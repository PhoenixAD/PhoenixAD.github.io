<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kylin Island</title>
  <icon>https://www.gravatar.com/avatar/258a5ea74cb07c9efd65fef61cfca44c</icon>
  <subtitle>Live beautifully. Dream passionately. Love completely.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-27T17:27:39.600Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>David Lee</name>
    <email>phoenixyaj@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VScode常用命令</title>
    <link href="http://yoursite.com/2018/01/27/vscode/"/>
    <id>http://yoursite.com/2018/01/27/vscode/</id>
    <published>2018-01-27T14:06:07.000Z</published>
    <updated>2018-01-27T17:27:39.600Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>VSCode是微软推出的一款轻量编辑器，采取了和VS相同的UI界面，搭配合适的插件可以优化前端开发的体验。<a id="more"></a></p><p>布局：左侧是用于展示所要编辑的所有文件和文件夹的文件管理器，依次是<code>资源管理器</code>，<code>搜索</code>，<code>GIT</code>，<code>调试</code>，<code>插件</code>，右侧是打开文件的编辑区域，最多可同时打开三个编辑区域到侧边。</p><p>底栏：依次是<code>Git Branch</code>，<code>error&amp;warning</code>，<code>编码格式</code>等。</p><h2 id="常用插件（待补充）"><a href="#常用插件（待补充）" class="headerlink" title="常用插件（待补充）"></a>常用插件（待补充）</h2><ul><li>HTML Snippets：增强了zen-coding，增加了H5的自动补全，安装后每次打开自动启用(可能与其他插件冲突)。</li><li>Angular 1.x Snippets：增加了AngularJs 1在.html和.js中的代码补全，安装后每次打开自动启用。</li><li>Git Easy：增加了vscode中自带的git操作，安装后按F1调出控制台，输入git easy [options]完成git操作，代替git bash。</li><li>HTML CSS Support: 增加.html中css的代码补全，可以手动增加配置文件来增加外部css中的class补全。详情见插件说明。</li><li>VScode-icons： 美化VSCode的界面，在文件名前面显示小图标，安装后每次打开自动启用。</li><li>Git Blame：可以查看当前光标所在位置的Git Log，最近一次提交的人和时间，显示在左下角，安装后每次打开自动启用。</li><li>HTML CSS Class Completion：扫描项目中的所有css中的class名，在html中自动补全，安装后每次打开自动启用。注意：如果css过多容易卡死。</li><li>Debugger for Chrome：方便js调试的插件，前端项目在Chrome中运行起来之后，可以直接在VSCode中打断点、查看输出、查看控制台，需要配置launch.json,详情见插件说明。</li><li>background：VSCode美化插件，修改界面背景，详情见插件说明。</li><li>autopep8：VSCode代码规范化，exp：“a=1”-&gt;”a = 1”</li></ul><h2 id="常用快捷键（待补充）"><a href="#常用快捷键（待补充）" class="headerlink" title="常用快捷键（待补充）"></a>常用快捷键（待补充）</h2><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3><p>同时打开多个窗口（查看多个项目）</p><ul><li>打开一个新窗口：&emsp; Ctrl+Shift+N</li><li>关闭窗口： &emsp;&emsp;&emsp; Ctrl+Shift+W</li></ul><p>同时打开多个编辑器（查看多个文件）</p><ul><li>新建文件 Ctrl+N</li><li>历史打开文件之间切换 Ctrl+Tab，Alt+Left，Alt+Right</li><li>切出一个新的编辑器（最多3个）Ctrl+\，也可以按住Ctrl鼠标点击Explorer里的文件名</li><li>左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3</li><li>3个编辑器之间循环切换 Ctrl+`</li><li>编辑器换位置，Ctrl+k然后按Left或Right</li></ul><h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h3><h4 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h4><ul><li>代码行缩进Ctrl+[， Ctrl+]</li><li>折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]</li><li>Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行</li><li>代码格式化：Shift+Alt+F，或Ctrl+Shift+P后输入format code</li><li>修剪空格Ctrl+Shift+X</li><li>上下移动一行： Alt+Up 或 Alt+Down</li><li>向上向下复制一行： Shift+Alt+Up或Shift+Alt+Down</li><li>在当前行下边插入一行Ctrl+Enter</li><li>在当前行上方插入一行Ctrl+Shift+Enter</li></ul><h4 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h4><ul><li>跳转到定义处：F12</li><li>定义处缩略图：只看一眼而不跳转过去Alt+F12</li><li>列出所有的引用：Shift+F12</li><li>同时修改本文件中所有匹配的：Ctrl+F12</li><li>重命名：比如要修改一个方法名，可以选中后按F2，输入新的名字，回车，会发现所有的文件都修改过了。</li><li>跳转到下一个Error或Warning：当有多个错误时可以按F8逐个跳转</li><li>查看diff 在explorer里选择文件右键 Set file to compare，然后需要对比的文件上右键选择Compare with ‘file_name_you_chose’.</li></ul><h4 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h4><ul><li>查找 Ctrl+F</li><li>查找替换 Ctrl+H</li><li>整个文件夹中查找 Ctrl+Shift+F</li></ul><h4 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h4><ul><li>全屏：F11</li><li>zoomIn/zoomOut：Ctrl + =/Ctrl + -</li><li>侧边栏显/隐：Ctrl+B</li><li>预览markdown Ctrl+Shift+V</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>自动保存：File -&gt; AutoSave ，或者Ctrl+Shift+P，输入 auto</li></ul><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">Download Visual Studio Code</a></p>]]></content>
    
    <summary type="html">
    
      vscode用了一段时间，感觉还不错，能满足日常开发需要
    
    </summary>
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
      <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Python getopt模块详解</title>
    <link href="http://yoursite.com/2018/01/27/python-getopt/"/>
    <id>http://yoursite.com/2018/01/27/python-getopt/</id>
    <published>2018-01-27T12:54:01.000Z</published>
    <updated>2018-01-27T17:38:46.363Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Python-命令行处理"><a href="#Python-命令行处理" class="headerlink" title="Python 命令行处理"></a>Python 命令行处理</h2><p>经常写python脚本的同学一定都经历过命令行参数处理的问题。这里介绍python中一种常用的模块getopt<a id="more"></a></p><hr><h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><h4 id="先看看该函数的定义："><a href="#先看看该函数的定义：" class="headerlink" title="先看看该函数的定义："></a>先看看该函数的定义：<br></h4><p>def getopt(args, shortopts, longopts = [])<br>getopt(args, options[, long_options]) -&gt; opts, args</p><p>Parses command line options and parameter list. args is the argument list to be parsed, without the leading reference to the running program. Typically, this means “sys.argv[1:]”. shortopts is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (i.e., the same format that Unix getopt() uses). If specified, longopts is a list of strings with the names of the long options which should be supported. The leading ‘–’ characters should not be included in the option name. Options which require an argument should be followed by an equal sign (‘=’).</p><p>The return value consists of two elements: the first is a list of (option, value) pairs; the second is the list of program arguments left after the option list was stripped (this is a trailing slice of the first argument). Each option-and-value pair returned has the option as its first element, prefixed with a hyphen (e.g., ‘-x’), and the option argument as its second element, or an empty string if the option has no argument. The options occur in the list in the same order in which they were found, thus allowing multiple occurrences. Long and short options may be mixed.</p><h4 id="getopt的使用"><a href="#getopt的使用" class="headerlink" title="getopt的使用"></a>getopt的使用</h4><ol><li><p>很简单，先导入<br></p><p> import sys<br>import getopt</p></li><li><p>处理方法如下:</p><p> try:<br><br> &emsp; opts, args = getopt.getopt(sys.argv[1:], “ho:”, [“help”, “output=”])<br> except getopt.GetoptError:<br> &emsp; # print help information and exit:  </p><ul><li>处理所使用的函数叫getopt() ，因为是直接使用import 导入的getopt 模块，所以要加上限定getopt 才可以。</li><li>使用sys.argv[1:] 过滤掉第一个参数（它是执行脚本的名字，不应算作参数的一部分）。</li><li>使用短格式分析串”ho:” 。当一个选项只是表示开关状态时，即后面不带附加参数时，在分析串中写入选项字符。当选项后面是带一个附加参数时，在分析串中写入选项字符同时后面加一个”:” 号 。所以”ho:” 就表示”h” 是一个开关选项；”o:” 则表示后面应该带一个参数。</li><li>使用长格式分析串列表：[“help”, “output=”] 。长格式串也可以有开关状态，即后面不跟”=” 号。如果跟一个等号则表示后面还应有一个参数 。这个长格式表示”help” 是一个开关选项；”output=” 则表示后面应该带一个参数。</li><li>调用getopt 函数。函数返回两个列表：opts 和args 。opts 为分析出的格式信息。args 为不属于格式信息的剩余的命令行参数。opts 是一个两元组的列表。每个元素为：( 选项串, 附加参数) 。如果没有附加参数则为空串’’ 。</li><li>整个过程使用异常来包含，这样当分析出错时，就可以打印出使用信息来通知用户如何使用这个程序。</li></ul></li></ol><pre><code>如上面解释的一个命令行例子为：&gt; &apos;-h -o file --help --output=out file1 file2&apos;在分析完成后，opts 应该是：&gt; [(&apos;-h&apos;, &apos;&apos;), (&apos;-o&apos;, &apos;file&apos;), (&apos;--help&apos;, &apos;&apos;), (&apos;--output&apos;, &apos;out&apos;)]而args 则为：&gt; [&apos;file1&apos;, &apos;file2&apos;]</code></pre><ol><li>第三步主要是对分析出的参数进行判断是否存在，然后再进一步处理。主要的处理模式为： </li></ol><p>Python 代码：</p><pre><code>for o, a in opts:      if o in (&quot;-h&quot;, &quot;--help&quot;):          usage()          sys.exit()      if o in (&quot;-o&quot;, &quot;--output&quot;):          output = a  </code></pre><p>使用一个循环，每次从opts 中取出一个两元组，赋给两个变量。o 保存选项参数，a 为附加参数。接着对取出的选项参数进行处理。</p><p>实践：</p><pre><code>import sys;  import getopt;  def usage():      print(&quot;Usage:%s [-a|-o|-c] [--help|--output] args....&quot; %Dsys.argv[0]);  if &quot;__main__&quot; == __name__:      #lsArgs = [&quot;&quot;];      try:          opts,args = getopt.getopt(sys.argv[1:], &quot;ao:c&quot;, [&quot;help&quot;, &quot;output=&quot;]);          print(&quot;============ opts ==================&quot;);                 print(opts);          print(&quot;============ args ==================&quot;);          print(args);          #check all param          for opt,arg in opts:              if opt in (&quot;-h&quot;, &quot;--help&quot;):                  usage();                  sys.exit(1);              elif opt in (&quot;-t&quot;, &quot;--test&quot;):                  print(&quot;for test option&quot;);              else:                  print(&quot;%s  ==&gt; %s&quot; %(opt, arg));              except getopt.GetoptError:          print(&quot;getopt error!&quot;);          usage();          sys.exit(1);  </code></pre><p>输出结果：</p><pre><code>$ ./test_getopt.py  -a -oaaa -caa --output=out file1 t file2 -d============ opts ==================[(&apos;-a&apos;, &apos;&apos;), (&apos;-o&apos;, &apos;aaa&apos;), (&apos;-c&apos;, &apos;&apos;), (&apos;-a&apos;, &apos;&apos;), (&apos;-a&apos;, &apos;&apos;), (&apos;--output&apos;, &apos;out&apos;)]============ args ==================[&apos;file1&apos;, &apos;t&apos;, &apos;file2&apos;, &apos;-d&apos;]-a  ==&gt;-o  ==&gt; -c  ==&gt;-a  ==&gt;-a  ==&gt;--output  ==&gt; out</code></pre>]]></content>
    
    <summary type="html">
    
      getopt模块使用
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="getopt" scheme="http://yoursite.com/tags/getopt/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="http://yoursite.com/2018/01/23/kubernetes/"/>
    <id>http://yoursite.com/2018/01/23/kubernetes/</id>
    <published>2018-01-23T03:09:03.000Z</published>
    <updated>2018-01-27T14:35:06.484Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>使用kubernetes集群管理 docker容器  最近忙先贴上官方文档，等公司事情忙完再来更新<img src="/images/emojis/grin.png" width="32" height="32" class=" emoji nofancybox" title="grin"><br><br><a href="https://kubernetes.io/docs/" target="_blank" rel="noopener">k8s官方文档</a> <a id="more"></a> <br><br>多说一句，多啃啃官方文档还是比较有意思的，起码锻炼了我的英语阅读水平。。。<img src="/images/emojis/wink.png" width="32" height="32" class=" emoji nofancybox" title="wink"><br><br><br><br><br></li><li>To be continue…</li></ul>]]></content>
    
    <summary type="html">
    
      Experience about install and config k8s
    
    </summary>
    
      <category term="SRE" scheme="http://yoursite.com/categories/SRE/"/>
    
    
      <category term="K8s" scheme="http://yoursite.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial of Github Page + Hexo + Custom Domain + SSL Certification +..</title>
    <link href="http://yoursite.com/2018/01/23/tutorial/"/>
    <id>http://yoursite.com/2018/01/23/tutorial/</id>
    <published>2018-01-23T02:51:36.000Z</published>
    <updated>2018-01-27T14:31:18.026Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="关于搭建github博客的流程与注意事项"><a href="#关于搭建github博客的流程与注意事项" class="headerlink" title="关于搭建github博客的流程与注意事项"></a>关于搭建github博客的流程与注意事项</h2><ul><li>之前在我的vps上完成了一系列从建站-&gt;搭建博客-&gt;到自己写前后端等折腾了一番，获益匪浅。这里附上一篇之前我参考的建站教程，写的比较详细：<a id="more"></a>详见<a href="https://lnki96.me/" target="_blank" rel="noopener">Hui’s Home</a>。<br>如今转战Github Page，应该会长驻，不定期更新，分享技术心得，生活随笔，兴趣爱好。。。<br><br>总之，生活嘛，怎么好玩怎么来~<img src="/images/emojis/kissing_heart.png" width="32" height="32" class=" emoji nofancybox" title="kissing_heart"><br><br><br><br><br></li><li>To be continue… </li></ul><hr>]]></content>
    
    <summary type="html">
    
      Tutorial of github blog.
    
    </summary>
    
      <category term="Tutorials" scheme="http://yoursite.com/categories/Tutorials/"/>
    
    
      <category term="Github Blog" scheme="http://yoursite.com/tags/Github-Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/21/hello-world/"/>
    <id>http://yoursite.com/2018/01/21/hello-world/</id>
    <published>2018-01-21T09:38:32.027Z</published>
    <updated>2018-01-27T14:36:14.874Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
